AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'Create an Amazon EC2 instance running the Amazon Linux AMI. This example creates an EC2 security group
  for the instance, to limit SSH access. The UserData bash script runs a web resume, installing all the necessary packages,
  and setting Nginx up in order to serve it. The approximate time from Cloudformation launch to the web resume being ready 
  is approximately 5 minutes, on t2.micro'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type.      t2.micro- FREE TIER FOR 1 YEAR (1vCPU, 1GB RAM, up to 30GB SSD);          t2.nano- approx $0.006 per hour (0.5 vCPU, 1GB RAM)
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances. Leave it as 0.0.0.0/0 to allow connection attempts from anywhere. Or use your IP address (Tip- https://www.whatsmyip.org/), don't forget to add /32 at the end of it.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PageTitle:
    Description: The title that will appear in the browser tab, when visiting the web resume. Example- Johnny Apppleseed
    Type: String
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 
      ImageId: 'ami-06dc09bb8854cbde3' #rhel'ami-06178cf087598769c'
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum -y install git
            yum -y install gcc-c++
            yum -y install make
            curl -sL https://rpm.nodesource.com/setup_15.x | sudo -E bash -
            yum -y install nodejs
            curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
            yum -y install yarn
            npm install -g serve
            amazon-linux-extras install -y nginx1
            cd /etc/nginx/
            hname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
            sed -i "0,/server_name  _;/s//server_name  $hname;\n\n\tlocation \/ {\n\t\tproxy_pass http:\/\/localhost:5000;\n\t}\n/" nginx.conf
            systemctl restart nginx
            cd /home/ec2-user
            touch update_cv_restart.sh
            echo "#!/bin/bash" >> update_cv_restart.sh
            echo 'ps -ef | grep "/bin/serve -s dist" | grep -v grep | awk '\'{print \$2}\'' | xargs kill' >> update_cv_restart.sh
            echo 'cd /home/ec2-user/nuxt-resume/' >> update_cv_restart.sh
            echo 'echo n | npm run generate' >> update_cv_restart.sh
            echo 'serve -s dist &' >> update_cv_restart.sh
            chown ec2-user update_cv_restart.sh
            chgrp ec2-user update_cv_restart.sh
            chmod +x update_cv_restart.sh
            touch change_site_title.sh
            echo '#!/bin/bash' >> change_site_title.sh
            echo 'cd /home/ec2-user/nuxt-resume/pages/' >> change_site_title.sh
            echo "sed -i \"0,/title: \\\"IvÃ¡n Greve\\\"/s//title: \\\"\$1\\\"/\" index.vue" >> change_site_title.sh
            chown ec2-user change_site_title.sh
            chgrp ec2-user change_site_title.sh
            chmod +x change_site_title.sh
            sudo -u ec2-user bash -c 'git clone https://github.com/S-alj/easy-nuxt-resume; /home/ec2-user/change_site_title.sh ${PageTitle}; cd nuxt-resume/; npm install; echo n | npm run build; echo n | npm run generate; serve -s dist'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
Outputs:
  AvailabilityZone:
    Description: Availability Zone were the newly created EC2 instance is located
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance, where the resume page will be accessible.
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
